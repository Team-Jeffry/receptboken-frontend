
# http {

# 	# The identifier Backend is internal to nginx, and used to name this specific upstream
# 	upstream Backend {
# 		# hello is the internal DNS name used by the backend Service inside Kubernetes
# 		server rb-backend-service;
# 	}

# 	# The identifier Backend is internal to nginx, and used to name this specific upstream
# 	upstream Frontend {
# 		# hello is the internal DNS name used by the backend Service inside Kubernetes
# 		server rb-frontend-service;
# 	}	

# 	include mime.types;
# 	sendfile on;

# 	server {
# 		listen 80;
# 		add_header "Access-Control-Allow-Origin"  *;		

# 		location / {
# 			proxy_pass http://Frontend:3000
# 			root /app/build/;
# 			index index.html index.htm;     			
# 			try_files $uri $uri/ /index.html;

# 			proxy_http_version 1.1;    
# 			proxy_set_header Upgrade $http_upgrade;    
# 			proxy_set_header Host $host;    
# 			proxy_cache_bypass $http_upgrade;
# 		}

# 		location /api {
# 			# The following statement will proxy traffic to the upstream named Backend
# 			proxy_pass http://Backend:8080;
# 		}
# 	}

# }

http {

	include mime.types;
	default_type  application/octet-stream;
	# upstream rb-frontend {
	# 	server rb-frontend-service:3000;
	# }

	# upstream rb-backend {
	# 	server rb-backend-service:8080/api;
	# }

	server {
		listen 80;
		server_name localhost;

		add_header "Access-Control-Allow-Origin" "*" always;		

		add_header 'Access-Control-Allow-Origin' "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

	location / {

		root /app/build/;
		index index.html index.htm;     			
		try_files $uri $uri/ /index.html;

		add_header "Access-Control-Allow-Origin" "*" always;		

		add_header 'Access-Control-Allow-Origin' "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

		# proxy_set_header   Connection      "upgrade";
		# proxy_set_header   Host            $http_host;
		# proxy_set_header   X-Real-IP       $remote_addr;
		# proxy_set_header   X-NginX-Proxy   true;
		# proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		# proxy_http_version 1.1;
		# proxy_redirect     off;
		# proxy_buffering    off;
		# proxy_pass         http://rb-backend;
		# allow all;
	}

	# # New
	# location ^~ /api {
	# 	proxy_pass http://localhost:8080/v1/category/all;
	# }

	location /api {

		add_header 'Access-Control-Allow-Origin' "$http_origin" always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

		proxy_set_header   Host            $http_host;
		proxy_set_header   Upgrade         $http_upgrade;
		proxy_set_header   Connection      "upgrade";
		proxy_set_header   X-Real-IP       $remote_addr;
		proxy_set_header   X-NginX-Proxy   true;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version 1.1;
		proxy_redirect     off;
		proxy_pass         http://localhost;
	}
	}
}









